import pandas as pd
import spacy
from nltk.corpus import wordnet

# Load the English language model
nlp = spacy.load("en_core_web_sm")

# import data from .csv file
dataset = pd.read_csv("booksummaries.csv", header=0)

# Function to find synonyms of a given keyword using WordNet
def find_synonyms(keyword):
    synonyms = set()
    for syn in wordnet.synsets(keyword):
        for lemma in syn.lemmas():
            synonyms.add(lemma.name().lower())
    return list(synonyms)

# Function to find the count of a term in the plot
def count_term_occurrences(plot, term):
    # Tokenize the plot using spaCy
    plot_tokens = nlp(plot)
    count = 0

    for token in plot_tokens:
        if token.text.lower() == term.lower():
            count += 1

    return count

# Function to print a snippet of the plot containing the search term and its synonyms
def print_plot_snippet(plot, search_term, synonyms):
    # Tokenize the plot using spaCy
    plot_tokens = nlp(plot)
    snippet = []
    window_size = 20  # Number of words to include before and after the term

    # Count occurrences of the search term
    term_count = count_term_occurrences(plot, search_term)
    print(f"'{search_term}' occurs {term_count} times in the plot.")

    # Count occurrences of each synonym
    for synonym in synonyms:
        synonym_count = count_term_occurrences(plot, synonym)
        print(f"'{synonym}' occurs {synonym_count} times in the plot.")

    for token in plot_tokens:
        if token.text.lower() in [search_term] + synonyms:
            start = max(0, token.i - window_size)
            end = min(len(plot_tokens), token.i + window_size + 1)
            snippet.append(" ".join([t.text for t in plot_tokens[start:end]]))

    # Print the snippet
    print("\n".join(snippet))

# Function to find books containing a given keyword or its synonyms in the plot
def find_books_by_keyword(dataset, keyword):
    # Get synonyms for the keyword
    synonyms = find_synonyms(keyword.lower())

    matching_books = []
    for index, row in dataset.iterrows():
        plot = row['plot'].lower()
        if any(synonym in plot for synonym in synonyms) or keyword.lower() in plot:
            matching_books.append((row['title'], row['author'], synonyms, plot))
    return matching_books

# Function to handle the search process
def handle_search():
    # Input for the search term
    search_term = input("Enter a keyword to search for in the plots of the books: ")

    # Find books containing the search term or its synonyms in the plot
    matching_books_list = find_books_by_keyword(dataset, search_term)

    # Print the books that match the search term and its synonyms
    if matching_books_list:
        print(f"Books where '{search_term}' or its synonyms are found in the plot:")
        for title, author, synonyms, plot in matching_books_list:
            print(f"Title: {title}")
            print(f"Author: {author}")
            print(f"Synonyms for '{search_term}': {', '.join(synonyms)}")
            print("Plot Snippet:")
            print_plot_snippet(plot, search_term, synonyms)
            print()
    else:
        print(f"No books found where '{search_term}' or its synonyms are mentioned in the plot.")

# Call the function to start the search
handle_search()
